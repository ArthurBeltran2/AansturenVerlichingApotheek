
tryout8kanaalsdriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002538  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080025f8  080025f8  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800262c  0800262c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800262c  0800262c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800262c  0800262c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08002640  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08002640  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000491b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00005296  00000000  00000000  0002494f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000011a2  00000000  00000000  00029be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000007d0  00000000  00000000  0002ad88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00041ce8  00000000  00000000  0002b558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000728  00000000  00000000  0006d240  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000c3c8  00000000  00000000  0006d968  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00079d30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b34  00000000  00000000  00079dac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025e0 	.word	0x080025e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080025e0 	.word	0x080025e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000220:	4813      	ldr	r0, [pc, #76]	; (8000270 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000224:	4813      	ldr	r0, [pc, #76]	; (8000274 <LoopForever+0x6>)
    LDR R1, [R0]
 8000226:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000228:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800022a:	4a13      	ldr	r2, [pc, #76]	; (8000278 <LoopForever+0xa>)
    CMP R1, R2
 800022c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800022e:	d105      	bne.n	800023c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000230:	4812      	ldr	r0, [pc, #72]	; (800027c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000232:	4913      	ldr	r1, [pc, #76]	; (8000280 <LoopForever+0x12>)
    STR R1, [R0]
 8000234:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000236:	4813      	ldr	r0, [pc, #76]	; (8000284 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000238:	4913      	ldr	r1, [pc, #76]	; (8000288 <LoopForever+0x1a>)
    STR R1, [R0]
 800023a:	6001      	str	r1, [r0, #0]

0800023c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800023c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800023e:	e003      	b.n	8000248 <LoopCopyDataInit>

08000240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000246:	3104      	adds	r1, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000248:	4811      	ldr	r0, [pc, #68]	; (8000290 <LoopForever+0x22>)
  ldr  r3, =_edata
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <LoopForever+0x26>)
  adds  r2, r0, r1
 800024c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800024e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000250:	d3f6      	bcc.n	8000240 <CopyDataInit>
  ldr  r2, =_sbss
 8000252:	4a11      	ldr	r2, [pc, #68]	; (8000298 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000254:	e002      	b.n	800025c <LoopFillZerobss>

08000256 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000256:	2300      	movs	r3, #0
  str  r3, [r2]
 8000258:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800025a:	3204      	adds	r2, #4

0800025c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <LoopForever+0x2e>)
  cmp  r2, r3
 800025e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000260:	d3f9      	bcc.n	8000256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000262:	f001 f9fd 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000266:	f002 f98f 	bl	8002588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800026a:	f000 fbe3 	bl	8000a34 <main>

0800026e <LoopForever>:

LoopForever:
    b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
   ldr   r0, =_estack
 8000270:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000274:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000278:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800027c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000280:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000284:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000288:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 800028c:	08002634 	.word	0x08002634
  ldr  r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000294:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000298:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800029c:	20000028 	.word	0x20000028

080002a0 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <DMA1_Channel1_IRQHandler>
	...

080002a4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	0002      	movs	r2, r0
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b0:	1dfb      	adds	r3, r7, #7
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	001a      	movs	r2, r3
 80002b6:	231f      	movs	r3, #31
 80002b8:	401a      	ands	r2, r3
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <NVIC_EnableIRQ+0x28>)
 80002bc:	2101      	movs	r1, #1
 80002be:	4091      	lsls	r1, r2
 80002c0:	000a      	movs	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b002      	add	sp, #8
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	e000e100 	.word	0xe000e100

080002d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	0002      	movs	r2, r0
 80002d8:	6039      	str	r1, [r7, #0]
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002de:	1dfb      	adds	r3, r7, #7
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b7f      	cmp	r3, #127	; 0x7f
 80002e4:	d932      	bls.n	800034c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	4a2f      	ldr	r2, [pc, #188]	; (80003a4 <NVIC_SetPriority+0xd4>)
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	0019      	movs	r1, r3
 80002ee:	230f      	movs	r3, #15
 80002f0:	400b      	ands	r3, r1
 80002f2:	3b08      	subs	r3, #8
 80002f4:	089b      	lsrs	r3, r3, #2
 80002f6:	3306      	adds	r3, #6
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	18d3      	adds	r3, r2, r3
 80002fc:	3304      	adds	r3, #4
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	1dfa      	adds	r2, r7, #7
 8000302:	7812      	ldrb	r2, [r2, #0]
 8000304:	0011      	movs	r1, r2
 8000306:	2203      	movs	r2, #3
 8000308:	400a      	ands	r2, r1
 800030a:	00d2      	lsls	r2, r2, #3
 800030c:	21ff      	movs	r1, #255	; 0xff
 800030e:	4091      	lsls	r1, r2
 8000310:	000a      	movs	r2, r1
 8000312:	43d2      	mvns	r2, r2
 8000314:	401a      	ands	r2, r3
 8000316:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	019b      	lsls	r3, r3, #6
 800031c:	22ff      	movs	r2, #255	; 0xff
 800031e:	401a      	ands	r2, r3
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	0018      	movs	r0, r3
 8000326:	2303      	movs	r3, #3
 8000328:	4003      	ands	r3, r0
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032e:	481d      	ldr	r0, [pc, #116]	; (80003a4 <NVIC_SetPriority+0xd4>)
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	001c      	movs	r4, r3
 8000336:	230f      	movs	r3, #15
 8000338:	4023      	ands	r3, r4
 800033a:	3b08      	subs	r3, #8
 800033c:	089b      	lsrs	r3, r3, #2
 800033e:	430a      	orrs	r2, r1
 8000340:	3306      	adds	r3, #6
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	18c3      	adds	r3, r0, r3
 8000346:	3304      	adds	r3, #4
 8000348:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800034a:	e027      	b.n	800039c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034c:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <NVIC_SetPriority+0xd8>)
 800034e:	1dfb      	adds	r3, r7, #7
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	b25b      	sxtb	r3, r3
 8000354:	089b      	lsrs	r3, r3, #2
 8000356:	33c0      	adds	r3, #192	; 0xc0
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	589b      	ldr	r3, [r3, r2]
 800035c:	1dfa      	adds	r2, r7, #7
 800035e:	7812      	ldrb	r2, [r2, #0]
 8000360:	0011      	movs	r1, r2
 8000362:	2203      	movs	r2, #3
 8000364:	400a      	ands	r2, r1
 8000366:	00d2      	lsls	r2, r2, #3
 8000368:	21ff      	movs	r1, #255	; 0xff
 800036a:	4091      	lsls	r1, r2
 800036c:	000a      	movs	r2, r1
 800036e:	43d2      	mvns	r2, r2
 8000370:	401a      	ands	r2, r3
 8000372:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	019b      	lsls	r3, r3, #6
 8000378:	22ff      	movs	r2, #255	; 0xff
 800037a:	401a      	ands	r2, r3
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	0018      	movs	r0, r3
 8000382:	2303      	movs	r3, #3
 8000384:	4003      	ands	r3, r0
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800038a:	4807      	ldr	r0, [pc, #28]	; (80003a8 <NVIC_SetPriority+0xd8>)
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	b25b      	sxtb	r3, r3
 8000392:	089b      	lsrs	r3, r3, #2
 8000394:	430a      	orrs	r2, r1
 8000396:	33c0      	adds	r3, #192	; 0xc0
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	501a      	str	r2, [r3, r0]
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b003      	add	sp, #12
 80003a2:	bd90      	pop	{r4, r7, pc}
 80003a4:	e000ed00 	.word	0xe000ed00
 80003a8:	e000e100 	.word	0xe000e100

080003ac <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Resolution)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, Resolution);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <LL_ADC_SetCommonFrequencyMode+0x24>)
 80003bc:	401a      	ands	r2, r3
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	431a      	orrs	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b002      	add	sp, #8
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	fdffffff 	.word	0xfdffffff

080003d4 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	2207      	movs	r2, #7
 80003e4:	4393      	bics	r3, r2
 80003e6:	001a      	movs	r2, r3
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	431a      	orrs	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	615a      	str	r2, [r3, #20]
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b002      	add	sp, #8
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	2204      	movs	r2, #4
 8000408:	4393      	bics	r3, r2
 800040a:	001a      	movs	r2, r3
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	431a      	orrs	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	60da      	str	r2, [r3, #12]
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}

0800041c <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	035b      	lsls	r3, r3, #13
 800042e:	0b5b      	lsrs	r3, r3, #13
 8000430:	431a      	orrs	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}

0800043e <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	2201      	movs	r2, #1
 800044e:	4393      	bics	r3, r2
 8000450:	001a      	movs	r2, r3
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	611a      	str	r2, [r3, #16]
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <LL_ADC_EnableInternalRegulator+0x24>)
 8000472:	4013      	ands	r3, r2
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	0552      	lsls	r2, r2, #21
 8000478:	431a      	orrs	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b002      	add	sp, #8
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	6fffffe8 	.word	0x6fffffe8

0800048c <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2204      	movs	r2, #4
 800049a:	4393      	bics	r3, r2
 800049c:	001a      	movs	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	605a      	str	r2, [r3, #4]
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}

080004aa <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	2208      	movs	r2, #8
 80004b8:	4393      	bics	r3, r2
 80004ba:	001a      	movs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	605a      	str	r2, [r3, #4]
}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b002      	add	sp, #8
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <LL_RCC_HSI_Enable+0x18>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <LL_RCC_HSI_Enable+0x18>)
 80004d2:	2101      	movs	r1, #1
 80004d4:	430a      	orrs	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40021000 	.word	0x40021000

080004e4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <LL_RCC_HSI_IsReady+0x1c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2204      	movs	r2, #4
 80004ee:	4013      	ands	r3, r2
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d101      	bne.n	80004f8 <LL_RCC_HSI_IsReady+0x14>
 80004f4:	2301      	movs	r3, #1
 80004f6:	e000      	b.n	80004fa <LL_RCC_HSI_IsReady+0x16>
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	0018      	movs	r0, r3
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000512:	4013      	ands	r3, r2
 8000514:	0019      	movs	r1, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	021a      	lsls	r2, r3, #8
 800051a:	4b03      	ldr	r3, [pc, #12]	; (8000528 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800051c:	430a      	orrs	r2, r1
 800051e:	605a      	str	r2, [r3, #4]
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b002      	add	sp, #8
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	ffffe0ff 	.word	0xffffe0ff

08000530 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_RCC_SetSysClkSource+0x24>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	2203      	movs	r2, #3
 800053e:	4393      	bics	r3, r2
 8000540:	0019      	movs	r1, r3
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <LL_RCC_SetSysClkSource+0x24>)
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	430a      	orrs	r2, r1
 8000548:	60da      	str	r2, [r3, #12]
}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <LL_RCC_GetSysClkSource+0x14>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	220c      	movs	r2, #12
 8000562:	4013      	ands	r3, r2
}
 8000564:	0018      	movs	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000

08000570 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_RCC_SetAHBPrescaler+0x24>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	22f0      	movs	r2, #240	; 0xf0
 800057e:	4393      	bics	r3, r2
 8000580:	0019      	movs	r1, r3
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <LL_RCC_SetAHBPrescaler+0x24>)
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	430a      	orrs	r2, r1
 8000588:	60da      	str	r2, [r3, #12]
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <LL_RCC_SetAPB1Prescaler+0x28>)
 80005a6:	4013      	ands	r3, r2
 80005a8:	0019      	movs	r1, r3
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	60da      	str	r2, [r3, #12]
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40021000 	.word	0x40021000
 80005c0:	fffff8ff 	.word	0xfffff8ff

080005c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <LL_RCC_SetAPB2Prescaler+0x28>)
 80005d2:	4013      	ands	r3, r2
 80005d4:	0019      	movs	r1, r3
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	430a      	orrs	r2, r1
 80005dc:	60da      	str	r2, [r3, #12]
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000
 80005ec:	ffffc7ff 	.word	0xffffc7ff

080005f0 <LL_RCC_ConfigMCO>:
  *         @arg @ref LL_RCC_MCO1_DIV_8
  *         @arg @ref LL_RCC_MCO1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <LL_RCC_ConfigMCO+0x28>)
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <LL_RCC_ConfigMCO+0x2c>)
 8000600:	4013      	ands	r3, r2
 8000602:	0019      	movs	r1, r3
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	431a      	orrs	r2, r3
 800060a:	4b03      	ldr	r3, [pc, #12]	; (8000618 <LL_RCC_ConfigMCO+0x28>)
 800060c:	430a      	orrs	r2, r1
 800060e:	60da      	str	r2, [r3, #12]
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	80ffffff 	.word	0x80ffffff

08000620 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <LL_RCC_SetUSARTClockSource+0x2c>)
 800062a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	0c12      	lsrs	r2, r2, #16
 8000630:	43d2      	mvns	r2, r2
 8000632:	401a      	ands	r2, r3
 8000634:	0011      	movs	r1, r2
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	0c1a      	lsrs	r2, r3, #16
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <LL_RCC_SetUSARTClockSource+0x2c>)
 800063e:	430a      	orrs	r2, r1
 8000640:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40021000 	.word	0x40021000

08000650 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <LL_APB1_GRP1_EnableClock+0x28>)
 800065a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <LL_APB1_GRP1_EnableClock+0x28>)
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	430a      	orrs	r2, r1
 8000662:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <LL_APB1_GRP1_EnableClock+0x28>)
 8000666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4013      	ands	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b004      	add	sp, #16
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <LL_APB2_GRP1_EnableClock+0x28>)
 8000686:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_APB2_GRP1_EnableClock+0x28>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	430a      	orrs	r2, r1
 800068e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <LL_APB2_GRP1_EnableClock+0x28>)
 8000692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4013      	ands	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b004      	add	sp, #16
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <LL_IOP_GRP1_EnableClock+0x28>)
 80006b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <LL_IOP_GRP1_EnableClock+0x28>)
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <LL_IOP_GRP1_EnableClock+0x28>)
 80006be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	4013      	ands	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b004      	add	sp, #16
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <LL_SYSCFG_SetEXTISource+0x48>)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	21ff      	movs	r1, #255	; 0xff
 80006e4:	400b      	ands	r3, r1
 80006e6:	3302      	adds	r3, #2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	589b      	ldr	r3, [r3, r2]
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	0c12      	lsrs	r2, r2, #16
 80006f0:	210f      	movs	r1, #15
 80006f2:	4091      	lsls	r1, r2
 80006f4:	000a      	movs	r2, r1
 80006f6:	43d2      	mvns	r2, r2
 80006f8:	401a      	ands	r2, r3
 80006fa:	0011      	movs	r1, r2
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	0c1b      	lsrs	r3, r3, #16
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	409a      	lsls	r2, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <LL_SYSCFG_SetEXTISource+0x48>)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	24ff      	movs	r4, #255	; 0xff
 800070a:	4023      	ands	r3, r4
 800070c:	430a      	orrs	r2, r1
 800070e:	3302      	adds	r3, #2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	501a      	str	r2, [r3, r0]
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b003      	add	sp, #12
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	40010000 	.word	0x40010000

08000720 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <LL_FLASH_SetLatency+0x24>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2201      	movs	r2, #1
 800072e:	4393      	bics	r3, r2
 8000730:	0019      	movs	r1, r3
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <LL_FLASH_SetLatency+0x24>)
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	430a      	orrs	r2, r1
 8000738:	601a      	str	r2, [r3, #0]
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40022000 	.word	0x40022000

08000748 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <LL_FLASH_GetLatency+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2201      	movs	r2, #1
 8000752:	4013      	ands	r3, r2
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	40022000 	.word	0x40022000

08000760 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <LL_PWR_SetRegulVoltageScaling+0x28>)
 800076e:	4013      	ands	r3, r2
 8000770:	0019      	movs	r1, r3
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	430a      	orrs	r2, r1
 8000778:	601a      	str	r2, [r3, #0]
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40007000 	.word	0x40007000
 8000788:	ffffe7ff 	.word	0xffffe7ff

0800078c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2201      	movs	r2, #1
 800079a:	431a      	orrs	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	4393      	bics	r3, r2
 80007b8:	001a      	movs	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d00d      	beq.n	80007f4 <LL_TIM_OC_DisableFast+0x2c>
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2b10      	cmp	r3, #16
 80007dc:	d008      	beq.n	80007f0 <LL_TIM_OC_DisableFast+0x28>
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d101      	bne.n	80007ec <LL_TIM_OC_DisableFast+0x24>
 80007e8:	2304      	movs	r3, #4
 80007ea:	e004      	b.n	80007f6 <LL_TIM_OC_DisableFast+0x2e>
 80007ec:	2306      	movs	r3, #6
 80007ee:	e002      	b.n	80007f6 <LL_TIM_OC_DisableFast+0x2e>
 80007f0:	2302      	movs	r3, #2
 80007f2:	e000      	b.n	80007f6 <LL_TIM_OC_DisableFast+0x2e>
 80007f4:	2300      	movs	r3, #0
 80007f6:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3318      	adds	r3, #24
 80007fc:	001a      	movs	r2, r3
 80007fe:	0029      	movs	r1, r5
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <LL_TIM_OC_DisableFast+0x5c>)
 8000802:	5c5b      	ldrb	r3, [r3, r1]
 8000804:	18d3      	adds	r3, r2, r3
 8000806:	001c      	movs	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	0029      	movs	r1, r5
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <LL_TIM_OC_DisableFast+0x60>)
 800080e:	5c52      	ldrb	r2, [r2, r1]
 8000810:	0011      	movs	r1, r2
 8000812:	2204      	movs	r2, #4
 8000814:	408a      	lsls	r2, r1
 8000816:	43d2      	mvns	r2, r2
 8000818:	4013      	ands	r3, r2
 800081a:	6023      	str	r3, [r4, #0]

}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b002      	add	sp, #8
 8000822:	bdb0      	pop	{r4, r5, r7, pc}
 8000824:	080025f8 	.word	0x080025f8
 8000828:	08002600 	.word	0x08002600

0800082c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d00d      	beq.n	8000858 <LL_TIM_OC_EnablePreload+0x2c>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2b10      	cmp	r3, #16
 8000840:	d008      	beq.n	8000854 <LL_TIM_OC_EnablePreload+0x28>
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	429a      	cmp	r2, r3
 800084a:	d101      	bne.n	8000850 <LL_TIM_OC_EnablePreload+0x24>
 800084c:	2304      	movs	r3, #4
 800084e:	e004      	b.n	800085a <LL_TIM_OC_EnablePreload+0x2e>
 8000850:	2306      	movs	r3, #6
 8000852:	e002      	b.n	800085a <LL_TIM_OC_EnablePreload+0x2e>
 8000854:	2302      	movs	r3, #2
 8000856:	e000      	b.n	800085a <LL_TIM_OC_EnablePreload+0x2e>
 8000858:	2300      	movs	r3, #0
 800085a:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3318      	adds	r3, #24
 8000860:	001a      	movs	r2, r3
 8000862:	0029      	movs	r1, r5
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <LL_TIM_OC_EnablePreload+0x5c>)
 8000866:	5c5b      	ldrb	r3, [r3, r1]
 8000868:	18d3      	adds	r3, r2, r3
 800086a:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800086c:	6822      	ldr	r2, [r4, #0]
 800086e:	0029      	movs	r1, r5
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <LL_TIM_OC_EnablePreload+0x60>)
 8000872:	5c5b      	ldrb	r3, [r3, r1]
 8000874:	0019      	movs	r1, r3
 8000876:	2308      	movs	r3, #8
 8000878:	408b      	lsls	r3, r1
 800087a:	4313      	orrs	r3, r2
 800087c:	6023      	str	r3, [r4, #0]
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bdb0      	pop	{r4, r5, r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	080025f8 	.word	0x080025f8
 800088c:	08002600 	.word	0x08002600

08000890 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <LL_TIM_OC_GetCompareCH1>:
  * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <LL_TIM_SetClockSource+0x24>)
 80008cc:	401a      	ands	r2, r3
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	431a      	orrs	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	609a      	str	r2, [r3, #8]
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	ffffbff8 	.word	0xffffbff8

080008e4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2270      	movs	r2, #112	; 0x70
 80008f4:	4393      	bics	r3, r2
 80008f6:	001a      	movs	r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	431a      	orrs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	605a      	str	r2, [r3, #4]
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}

08000908 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	4393      	bics	r3, r2
 8000918:	001a      	movs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	609a      	str	r2, [r3, #8]
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}

08000926 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	2202      	movs	r2, #2
 8000934:	431a      	orrs	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60da      	str	r2, [r3, #12]
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}

08000942 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2201      	movs	r2, #1
 8000950:	431a      	orrs	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <LL_USART_ConfigAsyncMode+0x2c>)
 800096e:	401a      	ands	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	222a      	movs	r2, #42	; 0x2a
 800097a:	4393      	bics	r3, r2
 800097c:	001a      	movs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	609a      	str	r2, [r3, #8]
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	ffffb7ff 	.word	0xffffb7ff

08000990 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	435a      	muls	r2, r3
 80009a6:	0013      	movs	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	43db      	mvns	r3, r3
 80009ae:	400b      	ands	r3, r1
 80009b0:	001a      	movs	r2, r3
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	434b      	muls	r3, r1
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	434b      	muls	r3, r1
 80009bc:	431a      	orrs	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	601a      	str	r2, [r3, #0]
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b004      	add	sp, #16
 80009c8:	bd80      	pop	{r7, pc}

080009ca <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68d9      	ldr	r1, [r3, #12]
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	435a      	muls	r2, r3
 80009e0:	0013      	movs	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	189b      	adds	r3, r3, r2
 80009e6:	43db      	mvns	r3, r3
 80009e8:	400b      	ands	r3, r1
 80009ea:	001a      	movs	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	434b      	muls	r3, r1
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	434b      	muls	r3, r1
 80009f6:	431a      	orrs	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	60da      	str	r2, [r3, #12]
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b004      	add	sp, #16
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	619a      	str	r2, [r3, #24]
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff fe1f 	bl	800067c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	055b      	lsls	r3, r3, #21
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fe04 	bl	8000650 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f80c 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f000 fa18 	bl	8000e80 <MX_GPIO_Init>
  MX_ADC_Init();
 8000a50:	f000 f850 	bl	8000af4 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000a54:	f000 f99c 	bl	8000d90 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a58:	f000 f8fa 	bl	8000c50 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  TIM2StartRunning();
 8000a5c:	f000 fc84 	bl	8001368 <TIM2StartRunning>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <main+0x2c>
	...

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fe59 	bl	8000720 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	f7ff fe6a 	bl	8000748 <LL_FLASH_GetLatency>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d1fb      	bne.n	8000a70 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fe6f 	bl	8000760 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000a82:	f7ff fd21 	bl	80004c8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	f7ff fd2c 	bl	80004e4 <LL_RCC_HSI_IsReady>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d1fa      	bne.n	8000a88 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000a92:	2010      	movs	r0, #16
 8000a94:	f7ff fd36 	bl	8000504 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fd69 	bl	8000570 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_8);
 8000a9e:	23c0      	movs	r3, #192	; 0xc0
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fd78 	bl	8000598 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_8);
 8000aa8:	23c0      	movs	r3, #192	; 0xc0
 8000aaa:	019b      	lsls	r3, r3, #6
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff fd89 	bl	80005c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fd3c 	bl	8000530 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	f7ff fd4d 	bl	8000558 <LL_RCC_GetSysClkSource>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d1fa      	bne.n	8000aba <SystemClock_Config+0x56>
  {

  }

  LL_Init1msTick(16000000);
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <SystemClock_Config+0x8c>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 fd40 	bl	800254c <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemClock_Config+0x8c>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 fd4c 	bl	800256c <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000ad4:	23c0      	movs	r3, #192	; 0xc0
 8000ad6:	031b      	lsls	r3, r3, #12
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff fda1 	bl	8000620 <LL_RCC_SetUSARTClockSource>
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_SYSCLK, LL_RCC_MCO1_DIV_1);
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	045b      	lsls	r3, r3, #17
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff fd83 	bl	80005f0 <LL_RCC_ConfigMCO>
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	00f42400 	.word	0x00f42400

08000af4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b091      	sub	sp, #68	; 0x44
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000afa:	2428      	movs	r4, #40	; 0x28
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	0018      	movs	r0, r3
 8000b00:	2314      	movs	r3, #20
 8000b02:	001a      	movs	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	f001 fd63 	bl	80025d0 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000b0a:	2318      	movs	r3, #24
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	0018      	movs	r0, r3
 8000b10:	2310      	movs	r3, #16
 8000b12:	001a      	movs	r2, r3
 8000b14:	2100      	movs	r1, #0
 8000b16:	f001 fd5b 	bl	80025d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	2318      	movs	r3, #24
 8000b20:	001a      	movs	r2, r3
 8000b22:	2100      	movs	r1, #0
 8000b24:	f001 fd54 	bl	80025d0 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff fda5 	bl	800067c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fdb8 	bl	80006a8 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA0-CK_IN   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2203      	movs	r2, #3
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	003a      	movs	r2, r7
 8000b4c:	23a0      	movs	r3, #160	; 0xa0
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 f805 	bl	8001b62 <LL_GPIO_Init>

  /* ADC interrupt Init */
  NVIC_SetPriority(ADC1_COMP_IRQn, 0);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	200c      	movs	r0, #12
 8000b5c:	f7ff fbb8 	bl	80002d0 <NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000b60:	200c      	movs	r0, #12
 8000b62:	f7ff fb9f 	bl	80002a4 <NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0);
 8000b66:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <MX_ADC_Init+0x14c>)
 8000b68:	2101      	movs	r1, #1
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff fc56 	bl	800041c <LL_ADC_REG_SetSequencerChAdd>
  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000b70:	0021      	movs	r1, r4
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <MX_ADC_Init+0x14c>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f000 fde6 	bl	8001768 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <MX_ADC_Init+0x14c>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fc17 	bl	80003d4 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <MX_ADC_Init+0x14c>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff fc47 	bl	800043e <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <MX_ADC_Init+0x14c>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff fc1f 	bl	80003f8 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_ADC_Init+0x150>)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff fbf4 	bl	80003ac <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_ADC_Init+0x14c>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fc60 	bl	800048c <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_ADC_Init+0x14c>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fc6b 	bl	80004aa <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_ADC_Init+0x14c>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff fc44 	bl	8000464 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_ADC_Init+0x154>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	491a      	ldr	r1, [pc, #104]	; (8000c4c <MX_ADC_Init+0x158>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fa90 	bl	8000108 <__udivsi3>
 8000be8:	0003      	movs	r3, r0
 8000bea:	001a      	movs	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	189b      	adds	r3, r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	210a      	movs	r1, #10
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fa86 	bl	8000108 <__udivsi3>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 8000c00:	e002      	b.n	8000c08 <MX_ADC_Init+0x114>
     {
   wait_loop_index--;
 8000c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c04:	3b01      	subs	r3, #1
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 8000c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f9      	bne.n	8000c02 <MX_ADC_Init+0x10e>
     }
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c0e:	2118      	movs	r1, #24
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	05d2      	lsls	r2, r2, #23
 8000c16:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <MX_ADC_Init+0x14c>)
 8000c2e:	0019      	movs	r1, r3
 8000c30:	0010      	movs	r0, r2
 8000c32:	f000 fd63 	bl	80016fc <LL_ADC_Init>
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b011      	add	sp, #68	; 0x44
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	40012400 	.word	0x40012400
 8000c44:	40012708 	.word	0x40012708
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	00030d40 	.word	0x00030d40

08000c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c56:	2410      	movs	r4, #16
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	001a      	movs	r2, r3
 8000c60:	2100      	movs	r1, #0
 8000c62:	f001 fcb5 	bl	80025d0 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000c66:	003b      	movs	r3, r7
 8000c68:	0018      	movs	r0, r3
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f001 fcae 	bl	80025d0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fceb 	bl	8000650 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, 0);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	200f      	movs	r0, #15
 8000c7e:	f7ff fb27 	bl	80002d0 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff fb0e 	bl	80002a4 <NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	4a3d      	ldr	r2, [pc, #244]	; (8000d8c <MX_TIM2_Init+0x13c>)
 8000c98:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000ca0:	193a      	adds	r2, r7, r4
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 f9ab 	bl	8002004 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff fd78 	bl	80007a8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff fdfc 	bl	80008bc <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8000cc4:	003b      	movs	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000cca:	003b      	movs	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000cdc:	003a      	movs	r2, r7
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	05db      	lsls	r3, r3, #23
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f001 f9d5 	bl	8002094 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	2101      	movs	r1, #1
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fd69 	bl	80007c8 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000cf6:	003b      	movs	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000cfc:	003a      	movs	r2, r7
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	2110      	movs	r1, #16
 8000d04:	0018      	movs	r0, r3
 8000d06:	f001 f9c5 	bl	8002094 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	2110      	movs	r1, #16
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff fd59 	bl	80007c8 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d16:	003b      	movs	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8000d1c:	003a      	movs	r2, r7
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	0059      	lsls	r1, r3, #1
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 f9b4 	bl	8002094 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	005a      	lsls	r2, r3, #1
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fd46 	bl	80007c8 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d3c:	003b      	movs	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000d42:	003a      	movs	r2, r7
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	0159      	lsls	r1, r3, #5
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 f9a1 	bl	8002094 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	015a      	lsls	r2, r3, #5
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fd33 	bl	80007c8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_OC1REF);
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff fdbb 	bl	80008e4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff fdc8 	bl	8000908 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	05db      	lsls	r3, r3, #23
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fd54 	bl	800082c <LL_TIM_OC_EnablePreload>
  /* USER CODE BEGIN TIM2_Init 2 */
  /**************************/

  /* USER CODE END TIM2_Init 2 */

}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b009      	add	sp, #36	; 0x24
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	0000ffff 	.word	0x0000ffff

08000d90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b08f      	sub	sp, #60	; 0x3c
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d96:	241c      	movs	r4, #28
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	231c      	movs	r3, #28
 8000d9e:	001a      	movs	r2, r3
 8000da0:	2100      	movs	r1, #0
 8000da2:	f001 fc15 	bl	80025d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	0018      	movs	r0, r3
 8000daa:	2318      	movs	r3, #24
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f001 fc0e 	bl	80025d0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff fc49 	bl	8000650 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fc72 	bl	80006a8 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2202      	movs	r2, #2
 8000dce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2204      	movs	r2, #4
 8000de6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000de8:	1d3a      	adds	r2, r7, #4
 8000dea:	23a0      	movs	r3, #160	; 0xa0
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	0011      	movs	r1, r2
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 feb6 	bl	8001b62 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	0212      	lsls	r2, r2, #8
 8000dfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2202      	movs	r2, #2
 8000e02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2203      	movs	r2, #3
 8000e08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2204      	movs	r2, #4
 8000e1a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	1d3a      	adds	r2, r7, #4
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	0011      	movs	r1, r2
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 fe9c 	bl	8001b62 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	22e1      	movs	r2, #225	; 0xe1
 8000e2e:	0252      	lsls	r2, r2, #9
 8000e30:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e32:	0021      	movs	r1, r4
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	220c      	movs	r2, #12
 8000e4a:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <MX_USART2_UART_Init+0xec>)
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	0010      	movs	r0, r2
 8000e60:	f001 fb02 	bl	8002468 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <MX_USART2_UART_Init+0xec>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff fd7a 	bl	8000960 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <MX_USART2_UART_Init+0xec>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff fd67 	bl	8000942 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b00f      	add	sp, #60	; 0x3c
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	40004400 	.word	0x40004400

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000e86:	2418      	movs	r4, #24
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	001a      	movs	r2, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	f001 fb9d 	bl	80025d0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	003b      	movs	r3, r7
 8000e98:	0018      	movs	r0, r3
 8000e9a:	2318      	movs	r3, #24
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f001 fb96 	bl	80025d0 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f7ff fbff 	bl	80006a8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fbfc 	bl	80006a8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fbf9 	bl	80006a8 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(OUT0_GPIO_Port, OUT0_Pin);
 8000eb6:	23a0      	movs	r3, #160	; 0xa0
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	2102      	movs	r1, #2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff fdad 	bl	8000a1c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000ec2:	23a0      	movs	r3, #160	; 0xa0
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fda7 	bl	8000a1c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT2_GPIO_Port, OUT2_Pin);
 8000ece:	23a0      	movs	r3, #160	; 0xa0
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff fda1 	bl	8000a1c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT3_GPIO_Port, OUT3_Pin);
 8000eda:	23a0      	movs	r3, #160	; 0xa0
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	2120      	movs	r1, #32
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fd9b 	bl	8000a1c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT4_GPIO_Port, OUT4_Pin);
 8000ee6:	23a0      	movs	r3, #160	; 0xa0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fd95 	bl	8000a1c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT5_GPIO_Port, OUT5_Pin);
 8000ef2:	23a0      	movs	r3, #160	; 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff fd8f 	bl	8000a1c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT7_GPIO_Port, OUT7_Pin);
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	00da      	lsls	r2, r3, #3
 8000f02:	23a0      	movs	r3, #160	; 0xa0
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff fd87 	bl	8000a1c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT6_GPIO_Port, OUT6_Pin);
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	23a0      	movs	r3, #160	; 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff fd7f 	bl	8000a1c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8000f1e:	4bfe      	ldr	r3, [pc, #1016]	; (8001318 <MX_GPIO_Init+0x498>)
 8000f20:	2108      	movs	r1, #8
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff fd7a 	bl	8000a1c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = OUT0_Pin;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2201      	movs	r2, #1
 8000f32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f34:	003b      	movs	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f40:	003b      	movs	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT0_GPIO_Port, &GPIO_InitStruct);
 8000f46:	003a      	movs	r2, r7
 8000f48:	23a0      	movs	r3, #160	; 0xa0
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	0011      	movs	r1, r2
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 fe07 	bl	8001b62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2208      	movs	r2, #8
 8000f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f60:	003b      	movs	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f66:	003b      	movs	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT1_GPIO_Port, &GPIO_InitStruct);
 8000f72:	003a      	movs	r2, r7
 8000f74:	23a0      	movs	r3, #160	; 0xa0
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fdf1 	bl	8001b62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT2_Pin;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2210      	movs	r2, #16
 8000f84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2201      	movs	r2, #1
 8000f8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT2_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	003a      	movs	r2, r7
 8000fa0:	23a0      	movs	r3, #160	; 0xa0
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 fddb 	bl	8001b62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT3_Pin;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2220      	movs	r2, #32
 8000fb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fb8:	003b      	movs	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fc4:	003b      	movs	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT3_GPIO_Port, &GPIO_InitStruct);
 8000fca:	003a      	movs	r2, r7
 8000fcc:	23a0      	movs	r3, #160	; 0xa0
 8000fce:	05db      	lsls	r3, r3, #23
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 fdc5 	bl	8001b62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT4_Pin;
 8000fd8:	003b      	movs	r3, r7
 8000fda:	2240      	movs	r2, #64	; 0x40
 8000fdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fde:	003b      	movs	r3, r7
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fe4:	003b      	movs	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fea:	003b      	movs	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ff0:	003b      	movs	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT4_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	003a      	movs	r2, r7
 8000ff8:	23a0      	movs	r3, #160	; 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 fdaf 	bl	8001b62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT5_Pin;
 8001004:	003b      	movs	r3, r7
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800100a:	003b      	movs	r3, r7
 800100c:	2201      	movs	r2, #1
 800100e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001010:	003b      	movs	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001016:	003b      	movs	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800101c:	003b      	movs	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT5_GPIO_Port, &GPIO_InitStruct);
 8001022:	003a      	movs	r2, r7
 8001024:	23a0      	movs	r3, #160	; 0xa0
 8001026:	05db      	lsls	r3, r3, #23
 8001028:	0011      	movs	r1, r2
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fd99 	bl	8001b62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001030:	003b      	movs	r3, r7
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	0052      	lsls	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001038:	003b      	movs	r3, r7
 800103a:	2202      	movs	r2, #2
 800103c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800103e:	003b      	movs	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001044:	003b      	movs	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800104a:	003b      	movs	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001050:	003b      	movs	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	003a      	movs	r2, r7
 8001058:	23a0      	movs	r3, #160	; 0xa0
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f000 fd7f 	bl	8001b62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT7_Pin;
 8001064:	003b      	movs	r3, r7
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800106c:	003b      	movs	r3, r7
 800106e:	2201      	movs	r2, #1
 8001070:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001072:	003b      	movs	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001078:	003b      	movs	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800107e:	003b      	movs	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT7_GPIO_Port, &GPIO_InitStruct);
 8001084:	003a      	movs	r2, r7
 8001086:	23a0      	movs	r3, #160	; 0xa0
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	0011      	movs	r1, r2
 800108c:	0018      	movs	r0, r3
 800108e:	f000 fd68 	bl	8001b62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT6_Pin;
 8001092:	003b      	movs	r3, r7
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	0152      	lsls	r2, r2, #5
 8001098:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800109a:	003b      	movs	r3, r7
 800109c:	2201      	movs	r2, #1
 800109e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010a0:	003b      	movs	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010a6:	003b      	movs	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010ac:	003b      	movs	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT6_GPIO_Port, &GPIO_InitStruct);
 80010b2:	003a      	movs	r2, r7
 80010b4:	23a0      	movs	r3, #160	; 0xa0
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fd51 	bl	8001b62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 80010c0:	003b      	movs	r3, r7
 80010c2:	2208      	movs	r2, #8
 80010c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010c6:	003b      	movs	r3, r7
 80010c8:	2201      	movs	r2, #1
 80010ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010cc:	003b      	movs	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010d2:	003b      	movs	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010d8:	003b      	movs	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80010de:	003b      	movs	r3, r7
 80010e0:	4a8d      	ldr	r2, [pc, #564]	; (8001318 <MX_GPIO_Init+0x498>)
 80010e2:	0019      	movs	r1, r3
 80010e4:	0010      	movs	r0, r2
 80010e6:	f000 fd3c 	bl	8001b62 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 80010ea:	2100      	movs	r1, #0
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff faf1 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE1);
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	02db      	lsls	r3, r3, #11
 80010f6:	0019      	movs	r1, r3
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff faeb 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE9);
 80010fe:	4b87      	ldr	r3, [pc, #540]	; (800131c <MX_GPIO_Init+0x49c>)
 8001100:	0019      	movs	r1, r3
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fae6 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE11);
 8001108:	4b85      	ldr	r3, [pc, #532]	; (8001320 <MX_GPIO_Init+0x4a0>)
 800110a:	0019      	movs	r1, r3
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fae1 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE4);
 8001112:	2101      	movs	r1, #1
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fadd 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE5);
 800111a:	4b82      	ldr	r3, [pc, #520]	; (8001324 <MX_GPIO_Init+0x4a4>)
 800111c:	0019      	movs	r1, r3
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fad8 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE6);
 8001124:	4b80      	ldr	r3, [pc, #512]	; (8001328 <MX_GPIO_Init+0x4a8>)
 8001126:	0019      	movs	r1, r3
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff fad3 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE7);
 800112e:	4b7f      	ldr	r3, [pc, #508]	; (800132c <MX_GPIO_Init+0x4ac>)
 8001130:	0019      	movs	r1, r3
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff face 	bl	80006d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(IN7_GPIO_Port, IN7_Pin, LL_GPIO_PULL_NO);
 8001138:	4b77      	ldr	r3, [pc, #476]	; (8001318 <MX_GPIO_Init+0x498>)
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	0018      	movs	r0, r3
 8001140:	f7ff fc43 	bl	80009ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(IN4_GPIO_Port, IN4_Pin, LL_GPIO_PULL_NO);
 8001144:	4b74      	ldr	r3, [pc, #464]	; (8001318 <MX_GPIO_Init+0x498>)
 8001146:	2200      	movs	r2, #0
 8001148:	2102      	movs	r1, #2
 800114a:	0018      	movs	r0, r3
 800114c:	f7ff fc3d 	bl	80009ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(user_button_GPIO_Port, user_button_Pin, LL_GPIO_PULL_UP);
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	0099      	lsls	r1, r3, #2
 8001154:	23a0      	movs	r3, #160	; 0xa0
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	2201      	movs	r2, #1
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff fc35 	bl	80009ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(IN2_GPIO_Port, IN2_Pin, LL_GPIO_PULL_NO);
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	0119      	lsls	r1, r3, #4
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	2200      	movs	r2, #0
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fc2d 	bl	80009ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(IN0_GPIO_Port, IN0_Pin, LL_GPIO_PULL_NO);
 8001170:	4b69      	ldr	r3, [pc, #420]	; (8001318 <MX_GPIO_Init+0x498>)
 8001172:	2200      	movs	r2, #0
 8001174:	2110      	movs	r1, #16
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff fc27 	bl	80009ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(IN1_GPIO_Port, IN1_Pin, LL_GPIO_PULL_NO);
 800117c:	4b66      	ldr	r3, [pc, #408]	; (8001318 <MX_GPIO_Init+0x498>)
 800117e:	2200      	movs	r2, #0
 8001180:	2120      	movs	r1, #32
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff fc21 	bl	80009ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(IN5_GPIO_Port, IN5_Pin, LL_GPIO_PULL_NO);
 8001188:	4b63      	ldr	r3, [pc, #396]	; (8001318 <MX_GPIO_Init+0x498>)
 800118a:	2200      	movs	r2, #0
 800118c:	2140      	movs	r1, #64	; 0x40
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff fc1b 	bl	80009ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(IN6_GPIO_Port, IN6_Pin, LL_GPIO_PULL_NO);
 8001194:	4b60      	ldr	r3, [pc, #384]	; (8001318 <MX_GPIO_Init+0x498>)
 8001196:	2200      	movs	r2, #0
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff fc15 	bl	80009ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(IN7_GPIO_Port, IN7_Pin, LL_GPIO_MODE_INPUT);
 80011a0:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <MX_GPIO_Init+0x498>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff fbf2 	bl	8000990 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(IN4_GPIO_Port, IN4_Pin, LL_GPIO_MODE_INPUT);
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <MX_GPIO_Init+0x498>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff fbec 	bl	8000990 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(user_button_GPIO_Port, user_button_Pin, LL_GPIO_MODE_INPUT);
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	0099      	lsls	r1, r3, #2
 80011bc:	23a0      	movs	r3, #160	; 0xa0
 80011be:	05db      	lsls	r3, r3, #23
 80011c0:	2200      	movs	r2, #0
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff fbe4 	bl	8000990 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(IN2_GPIO_Port, IN2_Pin, LL_GPIO_MODE_INPUT);
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	0119      	lsls	r1, r3, #4
 80011cc:	23a0      	movs	r3, #160	; 0xa0
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	2200      	movs	r2, #0
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff fbdc 	bl	8000990 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(IN0_GPIO_Port, IN0_Pin, LL_GPIO_MODE_INPUT);
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <MX_GPIO_Init+0x498>)
 80011da:	2200      	movs	r2, #0
 80011dc:	2110      	movs	r1, #16
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff fbd6 	bl	8000990 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(IN1_GPIO_Port, IN1_Pin, LL_GPIO_MODE_INPUT);
 80011e4:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <MX_GPIO_Init+0x498>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	2120      	movs	r1, #32
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff fbd0 	bl	8000990 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(IN5_GPIO_Port, IN5_Pin, LL_GPIO_MODE_INPUT);
 80011f0:	4b49      	ldr	r3, [pc, #292]	; (8001318 <MX_GPIO_Init+0x498>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	2140      	movs	r1, #64	; 0x40
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff fbca 	bl	8000990 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(IN6_GPIO_Port, IN6_Pin, LL_GPIO_MODE_INPUT);
 80011fc:	4b46      	ldr	r3, [pc, #280]	; (8001318 <MX_GPIO_Init+0x498>)
 80011fe:	2200      	movs	r2, #0
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	0018      	movs	r0, r3
 8001204:	f7ff fbc4 	bl	8000990 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001208:	0021      	movs	r1, r4
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2201      	movs	r2, #1
 8001214:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2200      	movs	r2, #0
 800121a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2201      	movs	r2, #1
 8001220:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001222:	000c      	movs	r4, r1
 8001224:	187b      	adds	r3, r7, r1
 8001226:	0018      	movs	r0, r3
 8001228:	f000 fb58 	bl	80018dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800122c:	0021      	movs	r1, r4
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2202      	movs	r2, #2
 8001232:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2201      	movs	r2, #1
 8001238:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2200      	movs	r2, #0
 800123e:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2201      	movs	r2, #1
 8001244:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001246:	000c      	movs	r4, r1
 8001248:	187b      	adds	r3, r7, r1
 800124a:	0018      	movs	r0, r3
 800124c:	f000 fb46 	bl	80018dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8001250:	0021      	movs	r1, r4
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2201      	movs	r2, #1
 800125e:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2200      	movs	r2, #0
 8001264:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2202      	movs	r2, #2
 800126a:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800126c:	000c      	movs	r4, r1
 800126e:	187b      	adds	r3, r7, r1
 8001270:	0018      	movs	r0, r3
 8001272:	f000 fb33 	bl	80018dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8001276:	0021      	movs	r1, r4
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2201      	movs	r2, #1
 8001284:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2200      	movs	r2, #0
 800128a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2201      	movs	r2, #1
 8001290:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001292:	000c      	movs	r4, r1
 8001294:	187b      	adds	r3, r7, r1
 8001296:	0018      	movs	r0, r3
 8001298:	f000 fb20 	bl	80018dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 800129c:	0021      	movs	r1, r4
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2210      	movs	r2, #16
 80012a2:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2201      	movs	r2, #1
 80012a8:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2200      	movs	r2, #0
 80012ae:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2203      	movs	r2, #3
 80012b4:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012b6:	000c      	movs	r4, r1
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fb0e 	bl	80018dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80012c0:	0021      	movs	r1, r4
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2220      	movs	r2, #32
 80012c6:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2201      	movs	r2, #1
 80012cc:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2201      	movs	r2, #1
 80012d8:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012da:	000c      	movs	r4, r1
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 fafc 	bl	80018dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 80012e4:	0021      	movs	r1, r4
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2201      	movs	r2, #1
 80012f0:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	2200      	movs	r2, #0
 80012f6:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2201      	movs	r2, #1
 80012fc:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012fe:	000c      	movs	r4, r1
 8001300:	187b      	adds	r3, r7, r1
 8001302:	0018      	movs	r0, r3
 8001304:	f000 faea 	bl	80018dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8001308:	0021      	movs	r1, r4
 800130a:	187b      	adds	r3, r7, r1
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001310:	187b      	adds	r3, r7, r1
 8001312:	2201      	movs	r2, #1
 8001314:	711a      	strb	r2, [r3, #4]
 8001316:	e00b      	b.n	8001330 <MX_GPIO_Init+0x4b0>
 8001318:	50000400 	.word	0x50000400
 800131c:	00040002 	.word	0x00040002
 8001320:	000c0002 	.word	0x000c0002
 8001324:	00040001 	.word	0x00040001
 8001328:	00080001 	.word	0x00080001
 800132c:	000c0001 	.word	0x000c0001
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2200      	movs	r2, #0
 8001334:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2201      	movs	r2, #1
 800133a:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800133c:	187b      	adds	r3, r7, r1
 800133e:	0018      	movs	r0, r3
 8001340:	f000 facc 	bl	80018dc <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	2005      	movs	r0, #5
 8001348:	f7fe ffc2 	bl	80002d0 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_1_IRQn);
 800134c:	2005      	movs	r0, #5
 800134e:	f7fe ffa9 	bl	80002a4 <NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8001352:	2100      	movs	r1, #0
 8001354:	2007      	movs	r0, #7
 8001356:	f7fe ffbb 	bl	80002d0 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 800135a:	2007      	movs	r0, #7
 800135c:	f7fe ffa2 	bl	80002a4 <NVIC_EnableIRQ>

}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b009      	add	sp, #36	; 0x24
 8001366:	bd90      	pop	{r4, r7, pc}

08001368 <TIM2StartRunning>:

	CH4RiseCount = CH3FallCount;
	CH4FallCount = CH4RiseCount + DutyCycleCount;
}
void TIM2StartRunning(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
 /*Set CH1 first Rising edge to correct value*/
 LL_TIM_OC_SetCompareCH1(TIM2,CH1RiseCount);
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <TIM2StartRunning+0x30>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	05db      	lsls	r3, r3, #23
 8001374:	0011      	movs	r1, r2
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff fa8a 	bl	8000890 <LL_TIM_OC_SetCompareCH1>

 /* TIM2 interrupts set-up */
 /**************************/
 /* Enable the capture/compare interrupt for channel 1*/
 LL_TIM_EnableIT_CC1(TIM2);
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	05db      	lsls	r3, r3, #23
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff fad0 	bl	8000926 <LL_TIM_EnableIT_CC1>
 /**********************************/
 /* Enable output channel 1 */
 //LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);

 /* Enable counter */
 LL_TIM_EnableCounter(TIM2);
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	05db      	lsls	r3, r3, #23
 800138a:	0018      	movs	r0, r3
 800138c:	f7ff f9fe 	bl	800078c <LL_TIM_EnableCounter>

 /* Force update generation */
 //LL_TIM_GenerateEvent_UPDATE(TIM2);
 }
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	20000000 	.word	0x20000000

0800139c <TIM2CaptureCompareCH1_Callback>:

void TIM2CaptureCompareCH1_Callback(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
   /* Upon compare match, the counter value  should be equal to the */
  /* capture/compare register (TIMx_CCRx) value.                    */
  if(LL_TIM_OC_GetCompareCH1(TIM2) == CH1RiseCount)
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	05db      	lsls	r3, r3, #23
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fa7f 	bl	80008a8 <LL_TIM_OC_GetCompareCH1>
 80013aa:	0002      	movs	r2, r0
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <TIM2CaptureCompareCH1_Callback+0x90>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d117      	bne.n	80013e4 <TIM2CaptureCompareCH1_Callback+0x48>
  {

	  /*Set CH1 OC value to next matching value = CH1FallCount*/
	  LL_TIM_OC_SetCompareCH1(TIM2,CH1FallCount);
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <TIM2CaptureCompareCH1_Callback+0x94>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	0011      	movs	r1, r2
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff fa66 	bl	8000890 <LL_TIM_OC_SetCompareCH1>

	  /* Set Output Active High */
  	  LL_GPIO_SetOutputPin(LD3_GPIO_Port,LD3_Pin);
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <TIM2CaptureCompareCH1_Callback+0x98>)
 80013c6:	2108      	movs	r1, #8
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff fb1b 	bl	8000a04 <LL_GPIO_SetOutputPin>
  	  LL_GPIO_SetOutputPin(IN0_GPIO_Port,IN0_Pin);
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <TIM2CaptureCompareCH1_Callback+0x98>)
 80013d0:	2110      	movs	r1, #16
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff fb16 	bl	8000a04 <LL_GPIO_SetOutputPin>
  	  LL_GPIO_SetOutputPin(IN1_GPIO_Port,IN1_Pin);
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <TIM2CaptureCompareCH1_Callback+0x98>)
 80013da:	2120      	movs	r1, #32
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff fb11 	bl	8000a04 <LL_GPIO_SetOutputPin>

	  /*Set CH1 OC value to next matching value = CH1RiseCount*/
	  LL_TIM_OC_SetCompareCH1(TIM2,CH1RiseCount);

  }
}
 80013e2:	e020      	b.n	8001426 <TIM2CaptureCompareCH1_Callback+0x8a>
  else if(LL_TIM_OC_GetCompareCH1(TIM2) == CH1FallCount)
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	05db      	lsls	r3, r3, #23
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff fa5d 	bl	80008a8 <LL_TIM_OC_GetCompareCH1>
 80013ee:	0002      	movs	r2, r0
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <TIM2CaptureCompareCH1_Callback+0x94>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d116      	bne.n	8001426 <TIM2CaptureCompareCH1_Callback+0x8a>
	  LL_GPIO_ResetOutputPin(LD3_GPIO_Port,LD3_Pin);
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <TIM2CaptureCompareCH1_Callback+0x98>)
 80013fa:	2108      	movs	r1, #8
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff fb0d 	bl	8000a1c <LL_GPIO_ResetOutputPin>
	  LL_GPIO_ResetOutputPin(IN0_GPIO_Port,IN0_Pin);
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <TIM2CaptureCompareCH1_Callback+0x98>)
 8001404:	2110      	movs	r1, #16
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff fb08 	bl	8000a1c <LL_GPIO_ResetOutputPin>
	  LL_GPIO_ResetOutputPin(IN1_GPIO_Port,IN1_Pin);
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <TIM2CaptureCompareCH1_Callback+0x98>)
 800140e:	2120      	movs	r1, #32
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fb03 	bl	8000a1c <LL_GPIO_ResetOutputPin>
	  LL_TIM_OC_SetCompareCH1(TIM2,CH1RiseCount);
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <TIM2CaptureCompareCH1_Callback+0x90>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	05db      	lsls	r3, r3, #23
 800141e:	0011      	movs	r1, r2
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff fa35 	bl	8000890 <LL_TIM_OC_SetCompareCH1>
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004
 8001434:	50000400 	.word	0x50000400

08001438 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4013      	ands	r3, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	425a      	negs	r2, r3
 800144e:	4153      	adcs	r3, r2
 8001450:	b2db      	uxtb	r3, r3
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40010400 	.word	0x40010400

08001460 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <LL_EXTI_ClearFlag_0_31+0x18>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	615a      	str	r2, [r3, #20]
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40010400 	.word	0x40010400

0800147c <LL_TIM_ClearFlag_CC1>:
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	4252      	negs	r2, r2
 800148a:	611a      	str	r2, [r3, #16]
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}

08001494 <LL_TIM_IsActiveFlag_CC1>:
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	2202      	movs	r2, #2
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d101      	bne.n	80014ac <LL_TIM_IsActiveFlag_CC1+0x18>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_TIM_IsActiveFlag_CC1+0x1a>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <LL_GPIO_IsInputPinSet>:
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	4013      	ands	r3, r2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	425a      	negs	r2, r3
 80014ce:	4153      	adcs	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}

080014da <LL_GPIO_SetOutputPin>:
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <LL_GPIO_ResetOutputPin>:
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	46bd      	mov	sp, r7
 8001506:	b002      	add	sp, #8
 8001508:	bd80      	pop	{r7, pc}

0800150a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	405a      	eors	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	615a      	str	r2, [r3, #20]
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff ff6c 	bl	8001438 <LL_EXTI_IsActiveFlag_0_31>
 8001560:	1e03      	subs	r3, r0, #0
 8001562:	d002      	beq.n	800156a <EXTI0_1_IRQHandler+0x14>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff ff7b 	bl	8001460 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */

    /* USER CODE END LL_EXTI_LINE_0 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800156a:	2002      	movs	r0, #2
 800156c:	f7ff ff64 	bl	8001438 <LL_EXTI_IsActiveFlag_0_31>
 8001570:	1e03      	subs	r3, r0, #0
 8001572:	d002      	beq.n	800157a <EXTI0_1_IRQHandler+0x24>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff ff73 	bl	8001460 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8001584:	2010      	movs	r0, #16
 8001586:	f7ff ff57 	bl	8001438 <LL_EXTI_IsActiveFlag_0_31>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d014      	beq.n	80015b8 <EXTI4_15_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800158e:	2010      	movs	r0, #16
 8001590:	f7ff ff66 	bl	8001460 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    if (LL_GPIO_IsInputPinSet(IN4_GPIO_Port, IN4_Pin) !=RESET)
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <EXTI4_15_IRQHandler+0xa8>)
 8001596:	2102      	movs	r1, #2
 8001598:	0018      	movs	r0, r3
 800159a:	f7ff ff8c 	bl	80014b6 <LL_GPIO_IsInputPinSet>
 800159e:	1e03      	subs	r3, r0, #0
 80015a0:	d005      	beq.n	80015ae <EXTI4_15_IRQHandler+0x2e>
    {
		LL_GPIO_ResetOutputPin(IN4_GPIO_Port, IN4_Pin);
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <EXTI4_15_IRQHandler+0xa8>)
 80015a4:	2102      	movs	r1, #2
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff ffa3 	bl	80014f2 <LL_GPIO_ResetOutputPin>
 80015ac:	e004      	b.n	80015b8 <EXTI4_15_IRQHandler+0x38>
    }
	else
	{
		LL_GPIO_SetOutputPin(IN4_GPIO_Port, IN4_Pin);
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <EXTI4_15_IRQHandler+0xa8>)
 80015b0:	2102      	movs	r1, #2
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff ff91 	bl	80014da <LL_GPIO_SetOutputPin>
	}

    /* USER CODE END LL_EXTI_LINE_4 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 80015b8:	2020      	movs	r0, #32
 80015ba:	f7ff ff3d 	bl	8001438 <LL_EXTI_IsActiveFlag_0_31>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d002      	beq.n	80015c8 <EXTI4_15_IRQHandler+0x48>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 80015c2:	2020      	movs	r0, #32
 80015c4:	f7ff ff4c 	bl	8001460 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 80015c8:	2040      	movs	r0, #64	; 0x40
 80015ca:	f7ff ff35 	bl	8001438 <LL_EXTI_IsActiveFlag_0_31>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d002      	beq.n	80015d8 <EXTI4_15_IRQHandler+0x58>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80015d2:	2040      	movs	r0, #64	; 0x40
 80015d4:	f7ff ff44 	bl	8001460 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 80015d8:	2080      	movs	r0, #128	; 0x80
 80015da:	f7ff ff2d 	bl	8001438 <LL_EXTI_IsActiveFlag_0_31>
 80015de:	1e03      	subs	r3, r0, #0
 80015e0:	d002      	beq.n	80015e8 <EXTI4_15_IRQHandler+0x68>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 80015e2:	2080      	movs	r0, #128	; 0x80
 80015e4:	f7ff ff3c 	bl	8001460 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff ff23 	bl	8001438 <LL_EXTI_IsActiveFlag_0_31>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d009      	beq.n	800160a <EXTI4_15_IRQHandler+0x8a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	0018      	movs	r0, r3
 80015fc:	f7ff ff30 	bl	8001460 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_9 */
    LL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <EXTI4_15_IRQHandler+0xa8>)
 8001602:	2108      	movs	r1, #8
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff ff80 	bl	800150a <LL_GPIO_TogglePin>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff ff12 	bl	8001438 <LL_EXTI_IsActiveFlag_0_31>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d004      	beq.n	8001622 <EXTI4_15_IRQHandler+0xa2>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff ff1f 	bl	8001460 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_11 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	50000400 	.word	0x50000400

0800162c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END ADC1_COMP_IRQn 0 */

  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	 if(LL_TIM_IsActiveFlag_CC1(TIM2) == 1)
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	05db      	lsls	r3, r3, #23
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff ff28 	bl	8001494 <LL_TIM_IsActiveFlag_CC1>
 8001644:	0003      	movs	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d106      	bne.n	8001658 <TIM2_IRQHandler+0x22>
	  {
		 /* Clear the update interrupt flag*/
		 LL_TIM_ClearFlag_CC1(TIM2);
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	05db      	lsls	r3, r3, #23
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff ff14 	bl	800147c <LL_TIM_ClearFlag_CC1>

		 /* TIM2 capture/compare interrupt processing(function defined in main.c) */
		 TIM2CaptureCompareCH1_Callback();
 8001654:	f7ff fea2 	bl	800139c <TIM2CaptureCompareCH1_Callback>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <SystemInit+0x64>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <SystemInit+0x64>)
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	0049      	lsls	r1, r1, #1
 800166e:	430a      	orrs	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <SystemInit+0x64>)
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <SystemInit+0x64>)
 8001678:	4913      	ldr	r1, [pc, #76]	; (80016c8 <SystemInit+0x68>)
 800167a:	400a      	ands	r2, r1
 800167c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <SystemInit+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <SystemInit+0x64>)
 8001684:	4911      	ldr	r1, [pc, #68]	; (80016cc <SystemInit+0x6c>)
 8001686:	400a      	ands	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <SystemInit+0x64>)
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <SystemInit+0x64>)
 8001690:	2101      	movs	r1, #1
 8001692:	438a      	bics	r2, r1
 8001694:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <SystemInit+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <SystemInit+0x64>)
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <SystemInit+0x70>)
 800169e:	400a      	ands	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <SystemInit+0x64>)
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <SystemInit+0x64>)
 80016a8:	490a      	ldr	r1, [pc, #40]	; (80016d4 <SystemInit+0x74>)
 80016aa:	400a      	ands	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SystemInit+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <SystemInit+0x78>)
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	0512      	lsls	r2, r2, #20
 80016ba:	609a      	str	r2, [r3, #8]
#endif
}
 80016bc:	46c0      	nop			; (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40021000 	.word	0x40021000
 80016c8:	88ff400c 	.word	0x88ff400c
 80016cc:	fef6fff6 	.word	0xfef6fff6
 80016d0:	fffbffff 	.word	0xfffbffff
 80016d4:	ff02ffff 	.word	0xff02ffff
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <LL_ADC_IsEnabled>:
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	3b01      	subs	r3, #1
 80016ee:	425a      	negs	r2, r3
 80016f0:	4153      	adcs	r3, r2
 80016f2:	b2db      	uxtb	r3, r3
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b002      	add	sp, #8
 80016fa:	bd80      	pop	{r7, pc}

080016fc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001706:	230f      	movs	r3, #15
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff ffe3 	bl	80016dc <LL_ADC_IsEnabled>
 8001716:	1e03      	subs	r3, r0, #0
 8001718:	d118      	bne.n	800174c <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	4a11      	ldr	r2, [pc, #68]	; (8001764 <LL_ADC_Init+0x68>)
 8001720:	401a      	ands	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6859      	ldr	r1, [r3, #4]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	4319      	orrs	r1, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	430b      	orrs	r3, r1
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	089a      	lsrs	r2, r3, #2
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	e003      	b.n	8001754 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800174c:	230f      	movs	r3, #15
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001754:	230f      	movs	r3, #15
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	781b      	ldrb	r3, [r3, #0]
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	ffff3fc7 	.word	0xffff3fc7

08001768 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001772:	230f      	movs	r3, #15
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff ffad 	bl	80016dc <LL_ADC_IsEnabled>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d115      	bne.n	80017b2 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <LL_ADC_REG_Init+0x60>)
 800178c:	401a      	ands	r2, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4319      	orrs	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4319      	orrs	r1, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	4319      	orrs	r1, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	e003      	b.n	80017ba <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80017b2:	230f      	movs	r3, #15
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80017ba:	230f      	movs	r3, #15
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	781b      	ldrb	r3, [r3, #0]
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b004      	add	sp, #16
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	fffec23c 	.word	0xfffec23c

080017cc <LL_EXTI_EnableIT_0_31>:
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40010400 	.word	0x40010400

080017ec <LL_EXTI_DisableIT_0_31>:
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <LL_EXTI_DisableIT_0_31+0x20>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <LL_EXTI_DisableIT_0_31+0x20>)
 80017fe:	400a      	ands	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b002      	add	sp, #8
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	40010400 	.word	0x40010400

08001810 <LL_EXTI_EnableEvent_0_31>:
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <LL_EXTI_EnableEvent_0_31+0x1c>)
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <LL_EXTI_EnableEvent_0_31+0x1c>)
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40010400 	.word	0x40010400

08001830 <LL_EXTI_DisableEvent_0_31>:
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <LL_EXTI_DisableEvent_0_31+0x20>)
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	43d9      	mvns	r1, r3
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001842:	400a      	ands	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	40010400 	.word	0x40010400

08001854 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800185e:	6899      	ldr	r1, [r3, #8]
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	430a      	orrs	r2, r1
 8001866:	609a      	str	r2, [r3, #8]
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40010400 	.word	0x40010400

08001874 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	43d9      	mvns	r1, r3
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001886:	400a      	ands	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	40010400 	.word	0x40010400

08001898 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80018a2:	68d9      	ldr	r1, [r3, #12]
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40010400 	.word	0x40010400

080018b8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80018ca:	400a      	ands	r2, r1
 80018cc:	60da      	str	r2, [r3, #12]
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	40010400 	.word	0x40010400

080018dc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80018e4:	230f      	movs	r3, #15
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d065      	beq.n	80019c0 <LL_EXTI_Init+0xe4>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d100      	bne.n	80018fe <LL_EXTI_Init+0x22>
 80018fc:	e06b      	b.n	80019d6 <LL_EXTI_Init+0xfa>
    {
      switch (EXTI_InitStruct->Mode)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	795b      	ldrb	r3, [r3, #5]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d00e      	beq.n	8001924 <LL_EXTI_Init+0x48>
 8001906:	2b02      	cmp	r3, #2
 8001908:	d017      	beq.n	800193a <LL_EXTI_Init+0x5e>
 800190a:	2b00      	cmp	r3, #0
 800190c:	d120      	bne.n	8001950 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff ff8c 	bl	8001830 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff ff55 	bl	80017cc <LL_EXTI_EnableIT_0_31>
          break;
 8001922:	e01a      	b.n	800195a <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff ff5f 	bl	80017ec <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff ff6c 	bl	8001810 <LL_EXTI_EnableEvent_0_31>
          break;
 8001938:	e00f      	b.n	800195a <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff ff44 	bl	80017cc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff61 	bl	8001810 <LL_EXTI_EnableEvent_0_31>
          break;
 800194e:	e004      	b.n	800195a <LL_EXTI_Init+0x7e>
        default:
          status = ERROR;
 8001950:	230f      	movs	r3, #15
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
          break;
 8001958:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	799b      	ldrb	r3, [r3, #6]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d039      	beq.n	80019d6 <LL_EXTI_Init+0xfa>
      {
        switch (EXTI_InitStruct->Trigger)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	799b      	ldrb	r3, [r3, #6]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d00e      	beq.n	8001988 <LL_EXTI_Init+0xac>
 800196a:	2b03      	cmp	r3, #3
 800196c:	d017      	beq.n	800199e <LL_EXTI_Init+0xc2>
 800196e:	2b01      	cmp	r3, #1
 8001970:	d120      	bne.n	80019b4 <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff ff9e 	bl	80018b8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff ff67 	bl	8001854 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001986:	e027      	b.n	80019d8 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ff71 	bl	8001874 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff ff7e 	bl	8001898 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800199c:	e01c      	b.n	80019d8 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7ff ff56 	bl	8001854 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff ff73 	bl	8001898 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80019b2:	e011      	b.n	80019d8 <LL_EXTI_Init+0xfc>
          default:
            status = ERROR;
 80019b4:	230f      	movs	r3, #15
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
            break;
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	e00b      	b.n	80019d8 <LL_EXTI_Init+0xfc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff ff11 	bl	80017ec <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7ff ff2e 	bl	8001830 <LL_EXTI_DisableEvent_0_31>
 80019d4:	e000      	b.n	80019d8 <LL_EXTI_Init+0xfc>
      }
 80019d6:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80019d8:	230f      	movs	r3, #15
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	781b      	ldrb	r3, [r3, #0]
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <LL_GPIO_SetPinMode>:
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	435a      	muls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	189b      	adds	r3, r3, r2
 8001a02:	43db      	mvns	r3, r3
 8001a04:	400b      	ands	r3, r1
 8001a06:	001a      	movs	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	434b      	muls	r3, r1
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	434b      	muls	r3, r1
 8001a12:	431a      	orrs	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b004      	add	sp, #16
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <LL_GPIO_SetPinOutputType>:
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	43d2      	mvns	r2, r2
 8001a34:	401a      	ands	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	434b      	muls	r3, r1
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	605a      	str	r2, [r3, #4]
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <LL_GPIO_SetPinSpeed>:
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6899      	ldr	r1, [r3, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	435a      	muls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	189b      	adds	r3, r3, r2
 8001a66:	43db      	mvns	r3, r3
 8001a68:	400b      	ands	r3, r1
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	434b      	muls	r3, r1
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	434b      	muls	r3, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	609a      	str	r2, [r3, #8]
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b004      	add	sp, #16
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <LL_GPIO_SetPinPull>:
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68d9      	ldr	r1, [r3, #12]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	435a      	muls	r2, r3
 8001a9a:	0013      	movs	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	189b      	adds	r3, r3, r2
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	434b      	muls	r3, r1
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	434b      	muls	r3, r1
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	60da      	str	r2, [r3, #12]
}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b004      	add	sp, #16
 8001abc:	bd80      	pop	{r7, pc}

08001abe <LL_GPIO_SetAFPin_0_7>:
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a19      	ldr	r1, [r3, #32]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	4353      	muls	r3, r2
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	4353      	muls	r3, r2
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	435a      	muls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	434b      	muls	r3, r1
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	434b      	muls	r3, r1
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	434b      	muls	r3, r1
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	434b      	muls	r3, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	621a      	str	r2, [r3, #32]
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b004      	add	sp, #16
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <LL_GPIO_SetAFPin_8_15>:
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	0a12      	lsrs	r2, r2, #8
 8001b20:	4353      	muls	r3, r2
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	0a12      	lsrs	r2, r2, #8
 8001b26:	4353      	muls	r3, r2
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	0a12      	lsrs	r2, r2, #8
 8001b2c:	435a      	muls	r2, r3
 8001b2e:	0013      	movs	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	43db      	mvns	r3, r3
 8001b36:	400b      	ands	r3, r1
 8001b38:	001a      	movs	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	0a09      	lsrs	r1, r1, #8
 8001b42:	434b      	muls	r3, r1
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	0a09      	lsrs	r1, r1, #8
 8001b48:	434b      	muls	r3, r1
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	0a09      	lsrs	r1, r1, #8
 8001b4e:	434b      	muls	r3, r1
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	434b      	muls	r3, r1
 8001b54:	431a      	orrs	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b004      	add	sp, #16
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001b74:	e040      	b.n	8001bf8 <LL_GPIO_Init+0x96>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4091      	lsls	r1, r2
 8001b80:	000a      	movs	r2, r1
 8001b82:	4013      	ands	r3, r2
 8001b84:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d032      	beq.n	8001bf2 <LL_GPIO_Init+0x90>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff ff26 	bl	80019e6 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d003      	beq.n	8001baa <LL_GPIO_Init+0x48>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d106      	bne.n	8001bb8 <LL_GPIO_Init+0x56>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7ff ff49 	bl	8001a4a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff ff5f 	bl	8001a84 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d111      	bne.n	8001bf2 <LL_GPIO_Init+0x90>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	d807      	bhi.n	8001be4 <LL_GPIO_Init+0x82>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff ff6e 	bl	8001abe <LL_GPIO_SetAFPin_0_7>
 8001be2:	e006      	b.n	8001bf2 <LL_GPIO_Init+0x90>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff ff8b 	bl	8001b08 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	40da      	lsrs	r2, r3
 8001c00:	1e13      	subs	r3, r2, #0
 8001c02:	d1b8      	bne.n	8001b76 <LL_GPIO_Init+0x14>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d003      	beq.n	8001c14 <LL_GPIO_Init+0xb2>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d107      	bne.n	8001c24 <LL_GPIO_Init+0xc2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fefe 	bl	8001a20 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b004      	add	sp, #16
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <LL_RCC_HSI_IsReady>:
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <LL_RCC_HSI_IsReady+0x1c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d101      	bne.n	8001c44 <LL_RCC_HSI_IsReady+0x14>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <LL_RCC_HSI_IsReady+0x16>
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000

08001c50 <LL_RCC_LSE_IsReady>:
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <LL_RCC_LSE_IsReady+0x24>)
 8001c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d101      	bne.n	8001c6a <LL_RCC_LSE_IsReady+0x1a>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_RCC_LSE_IsReady+0x1c>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	40021000 	.word	0x40021000

08001c78 <LL_RCC_MSI_GetRange>:
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <LL_RCC_MSI_GetRange+0x14>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	23e0      	movs	r3, #224	; 0xe0
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	4013      	ands	r3, r2
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000

08001c90 <LL_RCC_GetSysClkSource>:
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <LL_RCC_GetSysClkSource+0x14>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	220c      	movs	r2, #12
 8001c9a:	4013      	ands	r3, r2
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <LL_RCC_GetAHBPrescaler>:
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <LL_RCC_GetAHBPrescaler+0x14>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	22f0      	movs	r2, #240	; 0xf0
 8001cb2:	4013      	ands	r3, r2
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <LL_RCC_GetAPB1Prescaler>:
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	23e0      	movs	r3, #224	; 0xe0
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4013      	ands	r3, r2
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <LL_RCC_GetUSARTClockSource+0x20>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	041b      	lsls	r3, r3, #16
 8001cec:	4313      	orrs	r3, r2
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	40021000 	.word	0x40021000

08001cfc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <LL_RCC_PLL_GetMainSource+0x14>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	025b      	lsls	r3, r3, #9
 8001d08:	4013      	ands	r3, r2
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000

08001d14 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	23f0      	movs	r3, #240	; 0xf0
 8001d1e:	039b      	lsls	r3, r3, #14
 8001d20:	4013      	ands	r3, r2
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000

08001d2c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <LL_RCC_PLL_GetDivider+0x14>)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	23c0      	movs	r3, #192	; 0xc0
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	4013      	ands	r3, r2
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000

08001d44 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d101      	bne.n	8001d58 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000

08001d64 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d135      	bne.n	8001de2 <LL_RCC_GetUSARTClockFreq+0x7e>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff ffad 	bl	8001cd8 <LL_RCC_GetUSARTClockSource>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	4a1d      	ldr	r2, [pc, #116]	; (8001df8 <LL_RCC_GetUSARTClockFreq+0x94>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00a      	beq.n	8001d9c <LL_RCC_GetUSARTClockFreq+0x38>
 8001d86:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <LL_RCC_GetUSARTClockFreq+0x98>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d015      	beq.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x54>
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <LL_RCC_GetUSARTClockFreq+0x9c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d11a      	bne.n	8001dc8 <LL_RCC_GetUSARTClockFreq+0x64>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001d92:	f000 f83b 	bl	8001e0c <RCC_GetSystemClockFreq>
 8001d96:	0003      	movs	r3, r0
 8001d98:	60fb      	str	r3, [r7, #12]
        break;
 8001d9a:	e027      	b.n	8001dec <LL_RCC_GetUSARTClockFreq+0x88>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001d9c:	f7ff ff48 	bl	8001c30 <LL_RCC_HSI_IsReady>
 8001da0:	1e03      	subs	r3, r0, #0
 8001da2:	d020      	beq.n	8001de6 <LL_RCC_GetUSARTClockFreq+0x82>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001da4:	f7ff ffce 	bl	8001d44 <LL_RCC_IsActiveFlag_HSIDIV>
 8001da8:	1e03      	subs	r3, r0, #0
 8001daa:	d002      	beq.n	8001db2 <LL_RCC_GetUSARTClockFreq+0x4e>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001dae:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001db0:	e019      	b.n	8001de6 <LL_RCC_GetUSARTClockFreq+0x82>
            usart_frequency = HSI_VALUE;
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <LL_RCC_GetUSARTClockFreq+0xa4>)
 8001db4:	60fb      	str	r3, [r7, #12]
        break;
 8001db6:	e016      	b.n	8001de6 <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001db8:	f7ff ff4a 	bl	8001c50 <LL_RCC_LSE_IsReady>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d014      	beq.n	8001dea <LL_RCC_GetUSARTClockFreq+0x86>
        {
          usart_frequency = LSE_VALUE;
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001dc6:	e010      	b.n	8001dea <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001dc8:	f000 f820 	bl	8001e0c <RCC_GetSystemClockFreq>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 f860 	bl	8001e94 <RCC_GetHCLKClockFreq>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 f872 	bl	8001ec0 <RCC_GetPCLK1ClockFreq>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]
        break;
 8001de0:	e004      	b.n	8001dec <LL_RCC_GetUSARTClockFreq+0x88>
    }
  }
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	e002      	b.n	8001dec <LL_RCC_GetUSARTClockFreq+0x88>
        break;
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	e000      	b.n	8001dec <LL_RCC_GetUSARTClockFreq+0x88>
        break;
 8001dea:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b004      	add	sp, #16
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	000c0008 	.word	0x000c0008
 8001dfc:	000c000c 	.word	0x000c000c
 8001e00:	000c0004 	.word	0x000c0004
 8001e04:	003d0900 	.word	0x003d0900
 8001e08:	00f42400 	.word	0x00f42400

08001e0c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001e12:	f7ff ff3d 	bl	8001c90 <LL_RCC_GetSysClkSource>
 8001e16:	0003      	movs	r3, r0
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d013      	beq.n	8001e44 <RCC_GetSystemClockFreq+0x38>
 8001e1c:	d802      	bhi.n	8001e24 <RCC_GetSystemClockFreq+0x18>
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <RCC_GetSystemClockFreq+0x22>
 8001e22:	e021      	b.n	8001e68 <RCC_GetSystemClockFreq+0x5c>
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d017      	beq.n	8001e58 <RCC_GetSystemClockFreq+0x4c>
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d018      	beq.n	8001e5e <RCC_GetSystemClockFreq+0x52>
 8001e2c:	e01c      	b.n	8001e68 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e2e:	f7ff ff23 	bl	8001c78 <LL_RCC_MSI_GetRange>
 8001e32:	0003      	movs	r3, r0
 8001e34:	0b5b      	lsrs	r3, r3, #13
 8001e36:	3301      	adds	r3, #1
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	0212      	lsls	r2, r2, #8
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	0013      	movs	r3, r2
 8001e40:	607b      	str	r3, [r7, #4]
      break;
 8001e42:	e01c      	b.n	8001e7e <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001e44:	f7ff ff7e 	bl	8001d44 <LL_RCC_IsActiveFlag_HSIDIV>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d002      	beq.n	8001e52 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <RCC_GetSystemClockFreq+0x7c>)
 8001e4e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001e50:	e015      	b.n	8001e7e <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <RCC_GetSystemClockFreq+0x80>)
 8001e54:	607b      	str	r3, [r7, #4]
      break;
 8001e56:	e012      	b.n	8001e7e <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <RCC_GetSystemClockFreq+0x84>)
 8001e5a:	607b      	str	r3, [r7, #4]
      break;
 8001e5c:	e00f      	b.n	8001e7e <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001e5e:	f000 f843 	bl	8001ee8 <RCC_PLL_GetFreqDomain_SYS>
 8001e62:	0003      	movs	r3, r0
 8001e64:	607b      	str	r3, [r7, #4]
      break;
 8001e66:	e00a      	b.n	8001e7e <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e68:	f7ff ff06 	bl	8001c78 <LL_RCC_MSI_GetRange>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	0b5b      	lsrs	r3, r3, #13
 8001e70:	3301      	adds	r3, #1
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	0212      	lsls	r2, r2, #8
 8001e76:	409a      	lsls	r2, r3
 8001e78:	0013      	movs	r3, r2
 8001e7a:	607b      	str	r3, [r7, #4]
      break;
 8001e7c:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001e7e:	687b      	ldr	r3, [r7, #4]
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	003d0900 	.word	0x003d0900
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200

08001e94 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001e9c:	f7ff ff04 	bl	8001ca8 <LL_RCC_GetAHBPrescaler>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <RCC_GetHCLKClockFreq+0x28>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	001a      	movs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	40d3      	lsrs	r3, r2
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	08002608 	.word	0x08002608

08001ec0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001ec8:	f7ff fefa 	bl	8001cc0 <LL_RCC_GetAPB1Prescaler>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <RCC_GetPCLK1ClockFreq+0x24>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	40d3      	lsrs	r3, r2
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	08002618 	.word	0x08002618

08001ee8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001eee:	f7ff ff05 	bl	8001cfc <LL_RCC_PLL_GetMainSource>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001efc:	f7ff ff22 	bl	8001d44 <LL_RCC_IsActiveFlag_HSIDIV>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d002      	beq.n	8001f0a <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001f06:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001f08:	e005      	b.n	8001f16 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001f0c:	607b      	str	r3, [r7, #4]
      break;
 8001f0e:	e002      	b.n	8001f16 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001f12:	607b      	str	r3, [r7, #4]
      break;
 8001f14:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001f16:	f7ff fefd 	bl	8001d14 <LL_RCC_PLL_GetMultiplicator>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	0c9b      	lsrs	r3, r3, #18
 8001f1e:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	001a      	movs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4353      	muls	r3, r2
 8001f28:	001c      	movs	r4, r3
 8001f2a:	f7ff feff 	bl	8001d2c <LL_RCC_PLL_GetDivider>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	0d9b      	lsrs	r3, r3, #22
 8001f32:	3301      	adds	r3, #1
 8001f34:	0019      	movs	r1, r3
 8001f36:	0020      	movs	r0, r4
 8001f38:	f7fe f8e6 	bl	8000108 <__udivsi3>
 8001f3c:	0003      	movs	r3, r0
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b003      	add	sp, #12
 8001f44:	bd90      	pop	{r4, r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	003d0900 	.word	0x003d0900
 8001f4c:	00f42400 	.word	0x00f42400
 8001f50:	007a1200 	.word	0x007a1200
 8001f54:	08002620 	.word	0x08002620

08001f58 <LL_TIM_SetPrescaler>:
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <LL_TIM_SetAutoReload>:
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <LL_TIM_OC_SetCompareCH1>:
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <LL_TIM_OC_SetCompareCH2>:
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LL_TIM_OC_SetCompareCH3>:
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <LL_TIM_OC_SetCompareCH4>:
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	615a      	str	r2, [r3, #20]
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	05db      	lsls	r3, r3, #23
 800201a:	429a      	cmp	r2, r3
 800201c:	d003      	beq.n	8002026 <LL_TIM_Init+0x22>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1a      	ldr	r2, [pc, #104]	; (800208c <LL_TIM_Init+0x88>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d107      	bne.n	8002036 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2270      	movs	r2, #112	; 0x70
 800202a:	4393      	bics	r3, r2
 800202c:	001a      	movs	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	05db      	lsls	r3, r3, #23
 800203c:	429a      	cmp	r2, r3
 800203e:	d003      	beq.n	8002048 <LL_TIM_Init+0x44>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <LL_TIM_Init+0x88>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d106      	bne.n	8002056 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <LL_TIM_Init+0x8c>)
 800204c:	401a      	ands	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0011      	movs	r1, r2
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff ff83 	bl	8001f70 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	001a      	movs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	0011      	movs	r1, r2
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff ff6f 	bl	8001f58 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff ffb3 	bl	8001fe8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b004      	add	sp, #16
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40010800 	.word	0x40010800
 8002090:	fffffcff 	.word	0xfffffcff

08002094 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80020a0:	2317      	movs	r3, #23
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b10      	cmp	r3, #16
 80020ac:	d017      	beq.n	80020de <LL_TIM_OC_Init+0x4a>
 80020ae:	d802      	bhi.n	80020b6 <LL_TIM_OC_Init+0x22>
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d009      	beq.n	80020c8 <LL_TIM_OC_Init+0x34>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80020b4:	e034      	b.n	8002120 <LL_TIM_OC_Init+0x8c>
  switch (Channel)
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	0052      	lsls	r2, r2, #1
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01a      	beq.n	80020f4 <LL_TIM_OC_Init+0x60>
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	0152      	lsls	r2, r2, #5
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d021      	beq.n	800210a <LL_TIM_OC_Init+0x76>
      break;
 80020c6:	e02b      	b.n	8002120 <LL_TIM_OC_Init+0x8c>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80020c8:	2317      	movs	r3, #23
 80020ca:	18fc      	adds	r4, r7, r3
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	0011      	movs	r1, r2
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 f82b 	bl	800212e <OC1Config>
 80020d8:	0003      	movs	r3, r0
 80020da:	7023      	strb	r3, [r4, #0]
      break;
 80020dc:	e020      	b.n	8002120 <LL_TIM_OC_Init+0x8c>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80020de:	2317      	movs	r3, #23
 80020e0:	18fc      	adds	r4, r7, r3
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	0011      	movs	r1, r2
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 f867 	bl	80021bc <OC2Config>
 80020ee:	0003      	movs	r3, r0
 80020f0:	7023      	strb	r3, [r4, #0]
      break;
 80020f2:	e015      	b.n	8002120 <LL_TIM_OC_Init+0x8c>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80020f4:	2317      	movs	r3, #23
 80020f6:	18fc      	adds	r4, r7, r3
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 f8a8 	bl	8002254 <OC3Config>
 8002104:	0003      	movs	r3, r0
 8002106:	7023      	strb	r3, [r4, #0]
      break;
 8002108:	e00a      	b.n	8002120 <LL_TIM_OC_Init+0x8c>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800210a:	2317      	movs	r3, #23
 800210c:	18fc      	adds	r4, r7, r3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0011      	movs	r1, r2
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f8e7 	bl	80022e8 <OC4Config>
 800211a:	0003      	movs	r3, r0
 800211c:	7023      	strb	r3, [r4, #0]
      break;
 800211e:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002120:	2317      	movs	r3, #23
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	781b      	ldrb	r3, [r3, #0]
}
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b007      	add	sp, #28
 800212c:	bd90      	pop	{r4, r7, pc}

0800212e <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	2201      	movs	r2, #1
 800213e:	4393      	bics	r3, r2
 8002140:	001a      	movs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2203      	movs	r2, #3
 800215c:	4393      	bics	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2270      	movs	r2, #112	; 0x70
 8002164:	4393      	bics	r3, r2
 8002166:	001a      	movs	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2202      	movs	r2, #2
 8002174:	4393      	bics	r3, r2
 8002176:	001a      	movs	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2201      	movs	r2, #1
 8002184:	4393      	bics	r3, r2
 8002186:	001a      	movs	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0011      	movs	r1, r2
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff feef 	bl	8001f88 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b006      	add	sp, #24
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	2210      	movs	r2, #16
 80021cc:	4393      	bics	r3, r2
 80021ce:	001a      	movs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a18      	ldr	r2, [pc, #96]	; (800224c <OC2Config+0x90>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4a17      	ldr	r2, [pc, #92]	; (8002250 <OC2Config+0x94>)
 80021f2:	401a      	ands	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2220      	movs	r2, #32
 8002202:	4393      	bics	r3, r2
 8002204:	001a      	movs	r2, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2210      	movs	r2, #16
 8002214:	4393      	bics	r3, r2
 8002216:	001a      	movs	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0011      	movs	r1, r2
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff feb2 	bl	8001fa0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002242:	2300      	movs	r3, #0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b006      	add	sp, #24
 800224a:	bd80      	pop	{r7, pc}
 800224c:	fffffcff 	.word	0xfffffcff
 8002250:	ffff8fff 	.word	0xffff8fff

08002254 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <OC3Config+0x8c>)
 8002264:	401a      	ands	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2203      	movs	r2, #3
 8002280:	4393      	bics	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2270      	movs	r2, #112	; 0x70
 8002288:	4393      	bics	r3, r2
 800228a:	001a      	movs	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4313      	orrs	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <OC3Config+0x90>)
 8002298:	401a      	ands	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <OC3Config+0x8c>)
 80022a8:	401a      	ands	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0011      	movs	r1, r2
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7ff fe75 	bl	8001fb8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b006      	add	sp, #24
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	fffffeff 	.word	0xfffffeff
 80022e4:	fffffdff 	.word	0xfffffdff

080022e8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <OC4Config+0x8c>)
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a19      	ldr	r2, [pc, #100]	; (8002378 <OC4Config+0x90>)
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a18      	ldr	r2, [pc, #96]	; (800237c <OC4Config+0x94>)
 800231c:	401a      	ands	r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <OC4Config+0x98>)
 800232c:	401a      	ands	r2, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	031b      	lsls	r3, r3, #12
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <OC4Config+0x8c>)
 800233c:	401a      	ands	r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	031b      	lsls	r3, r3, #12
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0011      	movs	r1, r2
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff fe37 	bl	8001fd0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002368:	2300      	movs	r3, #0
}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b006      	add	sp, #24
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	ffffefff 	.word	0xffffefff
 8002378:	fffffcff 	.word	0xfffffcff
 800237c:	ffff8fff 	.word	0xffff8fff
 8002380:	ffffdfff 	.word	0xffffdfff

08002384 <LL_USART_IsEnabled>:
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <LL_USART_IsEnabled+0x18>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <LL_USART_IsEnabled+0x1a>
 800239c:	2300      	movs	r3, #0
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <LL_USART_SetStopBitsLength>:
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <LL_USART_SetStopBitsLength+0x24>)
 80023b8:	401a      	ands	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	605a      	str	r2, [r3, #4]
}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	ffffcfff 	.word	0xffffcfff

080023d0 <LL_USART_SetHWFlowCtrl>:
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <LL_USART_SetHWFlowCtrl+0x24>)
 80023e0:	401a      	ands	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	609a      	str	r2, [r3, #8]
}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b002      	add	sp, #8
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	fffffcff 	.word	0xfffffcff

080023f8 <LL_USART_SetBaudRate>:
{
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	429a      	cmp	r2, r3
 800240e:	d117      	bne.n	8002440 <LL_USART_SetBaudRate+0x48>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	005a      	lsls	r2, r3, #1
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	18d3      	adds	r3, r2, r3
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	0018      	movs	r0, r3
 800241e:	f7fd fe73 	bl	8000108 <__udivsi3>
 8002422:	0003      	movs	r3, r0
 8002424:	b29b      	uxth	r3, r3
 8002426:	001d      	movs	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <LL_USART_SetBaudRate+0x6c>)
 800242a:	402b      	ands	r3, r5
 800242c:	001c      	movs	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800242e:	086b      	lsrs	r3, r5, #1
 8002430:	b29b      	uxth	r3, r3
 8002432:	001a      	movs	r2, r3
 8002434:	2307      	movs	r3, #7
 8002436:	4013      	ands	r3, r2
 8002438:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	60dc      	str	r4, [r3, #12]
}
 800243e:	e00c      	b.n	800245a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	085a      	lsrs	r2, r3, #1
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	18d3      	adds	r3, r2, r3
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	0018      	movs	r0, r3
 800244c:	f7fd fe5c 	bl	8000108 <__udivsi3>
 8002450:	0003      	movs	r3, r0
 8002452:	b29b      	uxth	r3, r3
 8002454:	001a      	movs	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	60da      	str	r2, [r3, #12]
}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b004      	add	sp, #16
 8002460:	bdb0      	pop	{r4, r5, r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	0000fff0 	.word	0x0000fff0

08002468 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002472:	230f      	movs	r3, #15
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff ff7f 	bl	8002384 <LL_USART_IsEnabled>
 8002486:	1e03      	subs	r3, r0, #0
 8002488:	d13b      	bne.n	8002502 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a20      	ldr	r2, [pc, #128]	; (8002510 <LL_USART_Init+0xa8>)
 8002490:	401a      	ands	r2, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4319      	orrs	r1, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	4319      	orrs	r1, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	430b      	orrs	r3, r1
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0011      	movs	r1, r2
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7ff ff76 	bl	80023a8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	0011      	movs	r1, r2
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff ff83 	bl	80023d0 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a11      	ldr	r2, [pc, #68]	; (8002514 <LL_USART_Init+0xac>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d104      	bne.n	80024dc <LL_USART_Init+0x74>
#endif
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80024d2:	200c      	movs	r0, #12
 80024d4:	f7ff fc46 	bl	8001d64 <LL_RCC_GetUSARTClockFreq>
 80024d8:	0003      	movs	r3, r0
 80024da:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00f      	beq.n	8002502 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 80024ea:	230f      	movs	r3, #15
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff7b 	bl	80023f8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002502:	230f      	movs	r3, #15
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	781b      	ldrb	r3, [r3, #0]
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b004      	add	sp, #16
 800250e:	bd80      	pop	{r7, pc}
 8002510:	efff69f3 	.word	0xefff69f3
 8002514:	40004400 	.word	0x40004400

08002518 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002522:	6839      	ldr	r1, [r7, #0]
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7fd fdef 	bl	8000108 <__udivsi3>
 800252a:	0003      	movs	r3, r0
 800252c:	001a      	movs	r2, r3
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <LL_InitTick+0x30>)
 8002530:	3a01      	subs	r2, #1
 8002532:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <LL_InitTick+0x30>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253a:	4b03      	ldr	r3, [pc, #12]	; (8002548 <LL_InitTick+0x30>)
 800253c:	2205      	movs	r2, #5
 800253e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}
 8002548:	e000e010 	.word	0xe000e010

0800254c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002554:	23fa      	movs	r3, #250	; 0xfa
 8002556:	009a      	lsls	r2, r3, #2
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f7ff ffdb 	bl	8002518 <LL_InitTick>
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b002      	add	sp, #8
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <LL_SetSystemCoreClock+0x18>)
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	601a      	str	r2, [r3, #0]
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b002      	add	sp, #8
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	20000008 	.word	0x20000008

08002588 <__libc_init_array>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	2600      	movs	r6, #0
 800258c:	4d0c      	ldr	r5, [pc, #48]	; (80025c0 <__libc_init_array+0x38>)
 800258e:	4c0d      	ldr	r4, [pc, #52]	; (80025c4 <__libc_init_array+0x3c>)
 8002590:	1b64      	subs	r4, r4, r5
 8002592:	10a4      	asrs	r4, r4, #2
 8002594:	42a6      	cmp	r6, r4
 8002596:	d109      	bne.n	80025ac <__libc_init_array+0x24>
 8002598:	2600      	movs	r6, #0
 800259a:	f000 f821 	bl	80025e0 <_init>
 800259e:	4d0a      	ldr	r5, [pc, #40]	; (80025c8 <__libc_init_array+0x40>)
 80025a0:	4c0a      	ldr	r4, [pc, #40]	; (80025cc <__libc_init_array+0x44>)
 80025a2:	1b64      	subs	r4, r4, r5
 80025a4:	10a4      	asrs	r4, r4, #2
 80025a6:	42a6      	cmp	r6, r4
 80025a8:	d105      	bne.n	80025b6 <__libc_init_array+0x2e>
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	00b3      	lsls	r3, r6, #2
 80025ae:	58eb      	ldr	r3, [r5, r3]
 80025b0:	4798      	blx	r3
 80025b2:	3601      	adds	r6, #1
 80025b4:	e7ee      	b.n	8002594 <__libc_init_array+0xc>
 80025b6:	00b3      	lsls	r3, r6, #2
 80025b8:	58eb      	ldr	r3, [r5, r3]
 80025ba:	4798      	blx	r3
 80025bc:	3601      	adds	r6, #1
 80025be:	e7f2      	b.n	80025a6 <__libc_init_array+0x1e>
 80025c0:	0800262c 	.word	0x0800262c
 80025c4:	0800262c 	.word	0x0800262c
 80025c8:	0800262c 	.word	0x0800262c
 80025cc:	08002630 	.word	0x08002630

080025d0 <memset>:
 80025d0:	0003      	movs	r3, r0
 80025d2:	1812      	adds	r2, r2, r0
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d100      	bne.n	80025da <memset+0xa>
 80025d8:	4770      	bx	lr
 80025da:	7019      	strb	r1, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	e7f9      	b.n	80025d4 <memset+0x4>

080025e0 <_init>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr

080025ec <_fini>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f2:	bc08      	pop	{r3}
 80025f4:	469e      	mov	lr, r3
 80025f6:	4770      	bx	lr
